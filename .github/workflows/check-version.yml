name: Version check

on:
  workflow_call:

# „Éê„Éº„Ç∏„Éß„É≥ÂÄ§„ÅØ TwitterClone.xcodeproj/project.pbxproj „Å´‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßË®òËø∞„Åï„Çå„Å¶„ÅÑ„Çã
#             MARKETING_VERSION = 1.0.1;

jobs:
  # exit 1 if version is NOT updated.
  version-checker:
    runs-on: ubuntu-20.04
    env:
      FILE_PATH: TwitterClone.xcodeproj/project.pbxproj
    steps:
      - name: Check out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # 0 means all branches

      - name: Check if all MARKETING_VERSION are same
        id: check-all-version
        run: |
          git checkout ${GITHUB_BASE_REF}
          # check the file
          VERSION="$(cat ${FILE_PATH} | grep MARKETING_VERSION | head -n1 | sed -E 's@.*= (.*);@\1@')"

          if [ -z "$VERSION" ]; then
            exit 1
          fi
          while read line
          do
            if [[ "$line" =~ 's@.*= (.*);@\1@' ]]; then
              if [[ "${BASH_REMATCH[1]}" != "$VERSION" ]]; then
                exit 1
              fi
            fi
          done < "$FILE_PATH"
          echo "::set-output name=version::$(echo ${VERSION})"

      - name: Outputs when diff found
        if: failure() && steps.check-all-version.outcome == 'failure'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### CI/CD Results
            Hello, I'm kokoichi üëã
            
            Your MARKETING_VERSIONs in TwitterClone.xcodeproj/project.pbxproj are not same.
            Please check.
            
            see more https://github.com/kokoichi206/twitter-clone-ios/blob/issue/3/scripts/version_update.sh
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Get version of BASE_REF
        id: version-base-ref
        run: |
          git checkout ${GITHUB_BASE_REF}
          # check the file
          VERSION="$(cat ${FILE_PATH} | grep MARKETING_VERSION | head -n1 | sed -E 's@.*= (.*);@\1@')"

          if [ -z "$VERSION" ]; then
            exit 1
          fi
          echo "::set-output name=version::$(echo ${VERSION})"
      - name: Get version of HEAD_REF
        id: version-head-ref
        run: |
          git checkout ${GITHUB_HEAD_REF}
          # check the file
          VERSION="$(cat ${FILE_PATH} | grep MARKETING_VERSION | head -n1 | sed -E 's@.*= (.*);@\1@')"

          if [ -z "$VERSION" ]; then
            exit 1
          fi
          echo "::set-output name=version::$(echo ${VERSION})"
      - name: Check whether version is updated
        run: |
          base="${{ steps.version-base-ref.outputs.version }}"
          head="${{ steps.version-head-ref.outputs.version }}"
          if [[ "$base" == "$head" ]]; then
            echo "Version is not updated!"
            exit 1
          fi
